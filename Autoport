## Setup Autoport Driver VM

1. Install **pip**, the python package manager, to install python packages required by the Autoport driver

    **On RHEL/Centos**:

        $ sudo yum install python-pip
        
2. Install **python-devel** and **libevent-devel** if they are not already installed

    **On RHEL/Centos**:

        $ sudo yum install libevent-devel python-devel
        
3. Install python libraries using **pip**

        $ sudo pip install Flask
        $ sudo pip install PyGithub
        $ sudo pip install requests
        $ sudo pip install paramiko
        $ sudo pip install threadpool
        $ sudo pip install diff-match-patch
        $ sudo pip install PyYaml
        $ sudo pip install flask-compress
        $ sudo pip install pytz
        $ sudo pip install python-novaclient
        
4. Install and configure the Autoport source code and start Autoport

        $ git clone git://github.com/ibmsoe/Autoport.git

    Edit the **Autoport/config.ini** file to provide Jenkins URL.   To accomplish, this you
    need to follow the instructions provided in the next section in this file pertaining to Jenkins Master.Return HERE when these steps are done.
    Modify following fields in the **Autoport/config.ini** file:
      [Jenkins Server]
      jenkinsUrl: <jenkins_server_url>
      jenkinsHostname: <jenkins_server_IP>
      artifactsPathPrefix: <jenkins_home_directory>
    
    
   3. SSH configuration :

  * Copy ssh keys from Autoport sandbox to root and jenkins accounts on Jenkins master

          $ cd Autoport
          $ scp ./data/security/jenkins  root@<jenkins-master>:.ssh/
          $ scp ./data/security/jenkins.pub  root@<jenkins-master>:.ssh/
          $ scp ./data/security/jenkins  jenkins@<jenkins-master>:.ssh/
          $ scp ./data/security/jenkins.pub jenkins@<jenkins-master>:.ssh/

  * Ensure that appropriate permissions are set on .ssh folder

          $ ssh root@<jenkins-master>
          $ su jenkins
          $ sudo chown -R jenkins:jenkins ~/.ssh
          $ sudo chmod 700 ~/.ssh
          $ sudo chmod 600 ~/.ssh/*
          $ sudo restorecon -R -v ~/.ssh
          
          
There are several ways to run Autoport:

    1. Private development web service that is addressable locally only.  Each user needs to install and configure the
       Autoport driver which is generally configured to use a shared jenkins cluster.  This provides the best
       performance by far, but each user needs to locally configure and install Autoport.  This is what autoport
       developers do.

            $ cd Autoport
            $ nohup python main.py -p

            To access Autoport, Local users paste this into their browser: 
            http://<vm_IP_addrs>:5000/autoport
            
### Steps to be carried out on Jenkins Master VM

    yum install -y wget git tar java-1.8.0-openjdk-devel.s390x
    export JAVA_HOME /usr/lib/jvm/java-1.8.0
    export PATH $PATH:$JAVA_HOME/bin
    wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.3-bin.tar.gz && tar zxf apache-ant-1.9.3-bin.tar.gz
    export ANT_HOME /apache-ant-1.9.3
    export PATH $PATH:$ANT_HOME/bin
    
    ******
    git clone https://git-wip-us.apache.org/repos/asf/maven.git/ --branch maven-3.2.5
    mkdir -p /root/.m2/repository/org/codehaus/plexus/plexus-container-default/1.5.5
    https://repo1.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.5.5/plexus-container-default-1.5.5.jar
    mv plexus-container-default-1.5.5.jar /root/.m2/repository/org/codehaus/plexus/plexus-container-default/1.5.5
    
    cd maven
    sed -i 's/timeout="600000"/timeout="2000000"/' build.xml
    ant -Dmaven.home="/maven_build" -Dmaven.test.skip=true
    *******
    
    wget http://mirror.fibergrid.in/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz & tar zxf apache-maven-3.3.9-bin.tar.gz
    export M2_HOME /apache-maven-3.3.9
    PATH $PATH:$M2_HOME/bin
    
    git clone  https://github.com/apache/tomcat80.git
    export CATALINA_HOME /tomcat80/output/build
    export PATH $PATH:$CATALINA_HOME/bin
    cd tomcat80
    git checkout TOMCAT_8_0_23
    cp build.properties.default build.properties
    ant
    
    echo "test.excludePerformance=true" >> build.properties
    sed -i 's/60000/6000000/' test/org/apache/tomcat/websocket/TesterFirehoseServer.java
    sed  -i '$ i <role rolename="manager-gui"/> <user username="tomcat" password="tomcat" roles="manager-gui"/> ' $CATALINA_HOME/conf/tomcat-users.xml
    
    git clone -b stable-1.625 https://github.com/jenkinsci/jenkins.git
    cd jenkins
    mvn clean install -pl war -am -DskipTests
    
    cp war/target/jenkins.war $CATALINA_HOME/webapps/jenkins.war
    mkdir /Jenkins
    cp war/target/jenkins.war /Jenkins
    
    useradd -p $(openssl passwd -1 <password>) jenkins -s /bin/bash -m -d /home/jenkins
    mkdir /home/jenkins/jenkins_home
    
    ### Edit **'/etc/default/jenkins'**
    JENKINS_HOME=/home/jenkins/jenkins_home
    
    ### Add **jenkins** user to sudoers list with no password "/etc/sudoers"
    jenkins ALL=(ALL:ALL) NOPASSWD: ALL
    
    
    *** to be done after SSH configuration step ***
    cd /root/.ssh
    vi authorized_keys
    cp jenkins.pub authorized_keys
    
    cd /home/jenkins/.ssh
    vi authorized_keys
    cp jenkins.pub authorized_keys
    
    *** modify the " ~./bashrc" with the below contents:
    export ANT_HOME=/scratch/jenkins_server/apache-ant-1.9.3
   export JAVA_HOME=/usr/lib/jvm/java-1.8.0
   export M2_HOME=/scratch/jenkins_server/apache-maven-3.3.9
   export CATALINA_HOME=/scratch/jenkins_server/tomcat80/output/build
   export JENKINS_HOME=/scratch/jenkins_server/.jenkins
   export PATH=$PATH:$JAVA_HOME/bin:$ANT_HOME/bin:$M2_HOME/bin:$CATALINA_HOME/bin
   export JAVA_OPTS="-Dmail.smtp.starttls.enable=true"
   export JAVA_ARGS="-Djava.awt.headless=true -XX:MaxPermSize=2048m"
    
    *** modify the Tomat port (if required) from 8080 to any number.\ in file "/conf/server.xml"
    cd $CATALINA_HOME/conf
    vi server.xml
    
    *** start/stop the Tomcat server
    catalina.sh start && tail -f $CATALINA_HOME/logs/catalina.out
    catatlina.sh stop
    
4. Jenkins server can be accessed at:

   http://jenkins_master_hostname:8080
    
    
### Jenkins Master First Time Configuration

1. Click on `Manage Jenkins -> Configure System`. Set number of executors to 8.

2. Click on `Manage Jenkins -> Manage Plugins`.
   Update the installed plugins,and click restart jenkins button.

3. After restart, install following plugins (Look on the available tab.
   If you do not see it, there is a search option for plugins)
      - Artifact Deployer Plugin
      - Copy Artifact Plugin
      - Compress build log Plugin
      - Conditional-buildstep Plugin
      - description setter plugin
      - Git Client Plugin
      - Git Plugin
      - GitHub Plugin
      - Github API Plugin
      - Hudson Post build task
      - Multijob plugin
      - Node and Label parameter Plugin
      - Parameterized Trigger Plugin
      - Plot plugin
      - Publish over SSH
      - Rebuilder
      - Run conditional Plugin
      - SSH Agent Plugin
      - Show Build Parameters Plugin
      - Workflow: Step API
      - Slave Setup Plugin
      - Docker plugin
      - Libvirt Slaves Plugin
      - Environment Injector Plugin
      - Build-timeout Plugin
      - Pre-scm-buildstep Plugin
      

### Chef Installation And Setup on Jenkins Master
    rpm -ivh chef-12.5.1-1.el7.s390x.rpm
    rpm -ivh chef-server-core-12.1.2+20151029120924-1.el7.s390x.rpm
    chef-server-ctl reconfigure
    
